@inject ItemsService ItemsService
@inject RunesService RunesService
@inject CrushService CrushService
@inject CharacteristicsService CharacteristicsService
@inject ILogger<Server> Logger
@page "/servers/{ServerName}"
@using BestCrush.Components.Pure
@using BestCrush.Domain.Models
@using BestCrush.Domain.Services
@using BestCrush.Extensions
@using DofusSharp.Dofocus.ApiClients.Models.Items
@using DofusSharp.Dofocus.ApiClients.Models.Runes
@using DofusSharp.DofusDb.ApiClients.Models.Characteristics
@using Microsoft.Extensions.Logging

<div class="container">
    <form method="post" @onsubmit="Search" @formname="search-form">
        <div class="input-group mb-3">
            <span class="input-group-text">Level</span>
            <InputNumber @bind-Value="Model!.LevelMin" class="form-control" placeholder="Min" aria-label="Min" disabled="@_searching"/>
            <span class="input-group-text">to</span>
            <InputNumber @bind-Value="Model!.LevelMax" class="form-control" placeholder="Max" aria-label="Max" disabled="@_searching"/>
        </div>

        <div class="d-flex justify-content-center mb-4">
            @if (_allItems is null)
            {
                <button class="btn btn-primary" type="submit" @onclick="Count" disabled="@_searching">Search items</button>
            }
            else
            {
                <button class="btn btn-outline-primary" type="button" @onclick="Count" disabled="@_searching">Search items</button>
            }
        </div>

        @if (_allItems is not null)
        {
            <div class="text-center">Found a total of @_allItems.Length items.</div>

            <div class="d-flex justify-content-center my-4">
                <button class="btn btn-primary" type="submit" disabled="@_searching">Find the <span class="fw-semibold">Best Crush</span></button>
            </div>

            @if (_searching)
            {
                int ranked = _rankedItems?.GroupBy(i => i.Equipment).Count() ?? 0;
                int unranked = _unrankedItems?.Count ?? 0;
                int done = ranked + unranked;
                double ratio = (double)done / _allItems.Length;
                int percent = (int)(ratio * 100);

                {
                    <div class="progress mb-4" role="progressbar" aria-label="Basic example" aria-valuenow="@done" aria-valuemin="0" aria-valuemax="@_allItems.Length">
                        <div class="progress-bar progress-bar-striped progress-bar-animated text-bg-warning" style="width: @percent%">@done / @_allItems.Length</div>
                    </div>
                }
            }
        }
    </form>


    @if (_unrankedItems is not null && _rankedItems is not null)
    {
        @if (_rankedItems.Count > 0)
        {
            <div class="my-4">
                <ul class="list-group list-group-flush rounded">
                    @foreach (ItemCrushResult item in _rankedItems.GroupBy(i => i.Equipment).Select(g => g.MaxBy(i => i.Benefits)).OrderByDescending(r => r.Benefits))
                    {
                        {
                            <li class="list-group-item">
                                <CrushResultLine Equipment="item.Equipment" Cost="item.Cost.Price" CostDate="item.Cost.LastUpdate"></CrushResultLine>
                            </li>
                        }

                        double yield = item.Benefits / item.Cost.Price;

                        {
                            <li class="list-group-item">
                                <div class="d-flex gap-4">
                                    <div class="d-flex flex-column align-items-center justify-content-center">
                                        @if (item.ItemIcon is not null)
                                        {
                                            <img src="data:@item.ItemIcon" width="64" height="64" alt="Item icon"/>
                                        }
                                        else
                                        {
                                            <div class="d-flex align-items-center justify-content-center fw-bold fs-1" style="width:64px;height:64px">
                                                ?
                                            </div>
                                        }
                                        <div>@item.Coefficient.ToString("P0")</div>
                                    </div>
                                    <div>
                                        <div>@item.Equipment.Name Lv. @item.Equipment.Level</div>
                                        <div>Cost: @item.Cost.Price.ToString("N0") <img src="img/kama-20.png" alt="Kama" width="20" height="20"/></div>
                                        <div>
                                            Price: @item.Price.ToString("N0") <img src="img/kama-20.png" alt="Kama" width="20" height="20"/>
                                            @if (item.FocusedCharacteristic is null)
                                            {
                                                <span class="text-secondary ms-1">(without focus)</span>
                                            }
                                            else
                                            {
                                                DofusDbCharacteristic? characteristic = _allCharacteristics.TryGetValue(item.FocusedCharacteristic.Value, out DofusDbCharacteristic? c) ? c : null;
                                                string characteristicStr = characteristic?.Name?.Localize() ?? item.FocusedCharacteristic.Value.ToDisplayName();
                                                <span class="text-secondary ms-1">(with focus: @characteristicStr)</span>
                                            }
                                        </div>
                                        <div>
                                            @if (item.Benefits >= 0)
                                            {
                                                <span class="text-success">
                                                    +@item.Benefits.ToString("N0") <img src="img/kama-20.png" alt="Kama" width="20" height="20"/> (+@yield.ToString("P0"))
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-danger">
                                                    @item.Benefits.ToString("N0") <img src="img/kama-20.png" alt="Kama" width="20" height="20"/> (@yield.ToString("P0"))
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="flex-grow-1 d-flex flex-wrap align-items-center justify-content-center gap-4">
                                        @foreach ((Characteristic characteristic, double value) in item.Runes)
                                        {
                                            <div class="text-center">
                                                @(value.ToString("0.00"))x
                                                <br/>
                                                @characteristic.ToDisplayName()
                                            </div>
                                        }
                                    </div>
                                    <div class="d-flex align-items-start justify-content-center">
                                        <button class="btn btn-outline-secondary" @onclick="() => RefreshBenefits(item.Equipment)" disabled="@_searching">Refresh</button>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        }

        @if (_unrankedItems.Count > 0)
        {
            <div class="my-4">
                <p>Could not compute results for items:</p>
                <ul class="text-secondary">
                    @foreach (Equipment item in _unrankedItems.Take(10))
                    {
                        <li>@item.Name Lv. @item.Level</li>
                    }
                </ul>
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public required string ServerName { get; set; }

    [SupplyParameterFromForm]
    private Request? Model { get; set; }

    private bool _searching;
    Dictionary<Characteristic, DofusDbCharacteristic> _allCharacteristics = [];
    Equipment[]? _allItems;
    List<ItemCrushResult>? _rankedItems;
    List<Equipment>? _unrankedItems;

    protected override async Task OnInitializedAsync()
    {
        Model ??= new Request();
        IReadOnlyDictionary<long, DofusDbCharacteristic> dofusDbCharacteristics = await CharacteristicsService.GetDofusDbCharacteristicsAsync();
        _allCharacteristics = dofusDbCharacteristics.Select(kv => (Characteristic: CharacteristicsService.GetCharacteristicFromDofusDb(kv.Value), DofusDbCharacteristic: kv.Value)).Where(kv => kv.Characteristic.HasValue).ToDictionary(kv => kv.Characteristic!.Value, kv => kv.DofusDbCharacteristic);
    }

    async Task Count()
    {
        if (_searching)
        {
            return;
        }

        _rankedItems = null;
        _unrankedItems = null;

        IReadOnlyCollection<Equipment> allItems = await ItemsService.GetEquipmentsAsync();
        Equipment[] items = FilterItems(allItems).ToArray();
        _allItems = items;
    }

    async Task Search()
    {
        if (_searching)
        {
            return;
        }

        _searching = true;
        try
        {
            _rankedItems = null;
            _unrankedItems = null;

            Task<IReadOnlyCollection<Equipment>> itemsTask = ItemsService.GetEquipmentsAsync();
            Task<IReadOnlyDictionary<Characteristic, DofocusRune>> runesByCharacteristicAsync = RunesService.GetRunesByCharacteristicAsync();
            Task<Dictionary<long, double>> runePricesTask = RunesService.GetRunePricesAsync(ServerName);

            await Task.WhenAll(itemsTask, runesByCharacteristicAsync, runePricesTask);

            Equipment[] items = FilterItems(itemsTask.Result).ToArray();
            _allItems = items;

            StateHasChanged();

            IReadOnlyDictionary<Characteristic, DofocusRune> runeByCharacteristic = runesByCharacteristicAsync.Result;
            Dictionary<long, double> runePrices = runePricesTask.Result;
            Dictionary<long, Characteristic> characteristicByRune = runeByCharacteristic.ToDictionary(kv => kv.Value.Id, kv => kv.Key);
            Dictionary<Characteristic, double> characteristicPrices = runePrices.Select(kv => (Characteristic: characteristicByRune.TryGetValue(kv.Key, out Characteristic characteristic) ? characteristic : (Characteristic?)null, Price: kv.Value)).Where(kv => kv.Characteristic.HasValue).ToDictionary(kv => kv.Characteristic!.Value, kv => kv.Price);

            _rankedItems = [];
            _unrankedItems = [];

            foreach (Equipment item in items)
            {
                try
                {
                    IReadOnlyCollection<ItemCrushResult> result = await ComputeBenefit(item, characteristicPrices, false);
                    if (result.Count == 0)
                    {
                        _unrankedItems.Add(item);
                    }
                    else
                    {
                        _rankedItems.AddRange(result);
                    }

                    StateHasChanged();
                }
                catch (Exception exn)
                {
                    _unrankedItems.Add(item);
                    Logger.LogError(exn, "Error while processing item {ItemName} ({ItemId})", item.Name, item.DofusDbId);
                }
            }

        }
        finally
        {
            _searching = false;
        }
    }

    async Task RefreshBenefits(Equipment equipment)
    {
        if (_rankedItems is null || _searching)
        {
            return;
        }

        _searching = true;
        try
        {
            await RunesService.ClearCachesAsync();

            IReadOnlyDictionary<Characteristic, DofocusRune> runeByCharacteristic = await RunesService.GetRunesByCharacteristicAsync();
            Dictionary<long, double> runePrices = await RunesService.GetRunePricesAsync(ServerName);
            Dictionary<long, Characteristic> characteristicByRune = runeByCharacteristic.ToDictionary(kv => kv.Value.Id, kv => kv.Key);
            Dictionary<Characteristic, double> characteristicPrices = runePrices.Select(kv => (Characteristic: characteristicByRune.TryGetValue(kv.Key, out Characteristic characteristic) ? characteristic : (Characteristic?)null, Price: kv.Value)).Where(kv => kv.Characteristic.HasValue).ToDictionary(kv => kv.Characteristic!.Value, kv => kv.Price);
            IReadOnlyCollection<ItemCrushResult> result = await ComputeBenefit(equipment, characteristicPrices, true);

            _rankedItems.RemoveAll(m => m.Equipment.Id == equipment.Id);
            _rankedItems.AddRange(result);
        }
        catch (Exception exn)
        {
            Logger.LogError(exn, "Error while processing item {ItemName} ({ItemId})", equipment.Name, equipment.DofusDbId);
        }
        finally
        {
            _searching = false;
        }
    }

    async Task<IReadOnlyCollection<ItemCrushResult>> ComputeBenefit(Equipment equipment, Dictionary<Characteristic, double> characteristicPrices, bool forceRefresh)
    {
        DofocusItem detailedItem = await ItemsService.GetItemAsync(equipment.DofusDbId, forceRefresh);

        DofocusCoefficientRecord? itemCoefficient = detailedItem.Coefficients.Where(c => c.ServerName == ServerName).OrderByDescending(c => c.LastUpdate).FirstOrDefault();
        if (itemCoefficient == null)
        {
            return [];
        }
        double coefficient = itemCoefficient.Coefficient / 100;

        DofocusItemPriceRecord? itemCost = detailedItem.Prices.Where(r => r.ServerName == ServerName).OrderByDescending(r => r.LastUpdate).FirstOrDefault();
        if (itemCost is null)
        {
            return [];
        }
        double cost = itemCost.Price;

        string? icon = await ItemsService.GetItemIconAsync(equipment);
        List<ItemCrushResult> result = [];
        Dictionary<Characteristic, double> averageLines = equipment.Characteristics.ToDictionary(c => c.Characteristic, c => (double)(c.From + c.To) / 2);
        IReadOnlyDictionary<Characteristic, double> runesWithoutFocus = CrushService.GetCrushResult(averageLines, equipment.Level, coefficient);
        double priceWithoutFocus = runesWithoutFocus.Sum(kv => characteristicPrices.GetValueOrDefault(kv.Key) * kv.Value);
        result.Add(new ItemCrushResult(equipment, icon, coefficient, itemCost, priceWithoutFocus, priceWithoutFocus - cost, null, runesWithoutFocus));

        foreach ((Characteristic characteristic, double value) in averageLines)
        {
            if (value <= 0)
            {
                continue;
            }

            double runesWithFocus = CrushService.GetFocusedCrushResult(averageLines, characteristic, equipment.Level, coefficient);
            double priceWithFocus = characteristicPrices.GetValueOrDefault(characteristic) * runesWithFocus;
            result.Add(new ItemCrushResult(equipment, icon, coefficient, itemCost, priceWithFocus, priceWithFocus - cost, characteristic, new Dictionary<Characteristic, double> { { characteristic, runesWithFocus } }));
        }

        return result;
    }

    IEnumerable<Equipment> FilterItems(IReadOnlyCollection<Equipment> items)
    {
        IEnumerable<Equipment> result = items;

        if (Model?.LevelMin is not null)
        {
            result = result.Where(i => i.Level >= Model.LevelMin);
        }

        if (Model?.LevelMax is not null)
        {
            result = result.Where(i => i.Level <= Model.LevelMax);
        }

        return result;
    }

    readonly record struct ItemCrushResult(Equipment Equipment, string? ItemIcon, double Coefficient, DofocusItemPriceRecord Cost, double Price, double Benefits, Characteristic? FocusedCharacteristic, IReadOnlyDictionary<Characteristic, double> Runes);

    public class Request
    {
        public int? LevelMin { get; set; }
        public int? LevelMax { get; set; }
    }

}