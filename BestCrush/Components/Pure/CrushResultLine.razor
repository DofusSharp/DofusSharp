@using BestCrush.Domain.Models
@using BestCrush.Domain.Services
@using BestCrush.Models
@using DofusSharp.Dofocus.ApiClients.Models.Items
@using DofusSharp.Dofocus.ApiClients.Models.Runes
@using Rune = BestCrush.Domain.Models.Rune
@inject ItemsService ItemsService

<div class="row align-items-stretch">
    @if (Equipment is not null)
    {
        <div class="col-5 d-flex gap-4">
            @if (!NoImage)
            {
                <div class="d-flex flex-column align-items-end">
                    <ItemIcon Item="Equipment" Background="IconBackground.Slot" Size="IconSize.Medium"></ItemIcon>
                    @if (_focusedRune is not null)
                    {
                        <ItemIcon Item="_focusedRune" Background="IconBackground.Slot" Size="IconSize.Small"></ItemIcon>
                    }
                </div>
            }
            <div>
                <div class="d-flex gap-2 justify-content-between">
                    <div>
                        <div class="fw-bold">@Equipment.Name</div>
                        <div>@Equipment.Type.ToDisplayName() Lv.@Equipment.Level</div>
                    </div>
                    @if (Cost is not null)
                    {
                        <div class="d-flex flex-column align-items-center">
                            <Kamas Amount="Cost.Price" Size="IconSize.Medium"/>
                            <span class="small text-secondary">@Cost.LastUpdate.ToString("G")</span>
                        </div>
                    }
                </div>
                @if (Equipment.Recipe.Any())
                {
                    <div class="d-flex flex-wrap gap-2">
                        @if (!NoImage)
                        {
                            @foreach (RecipeEntry entry in Equipment.Recipe)
                            {
                                <div>
                                    <ItemIconWithCount Item="entry.Resource" Count="entry.Count" Size="IconSize.Medium"></ItemIconWithCount>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>

        <div class="col-4 border-start">
            <div class="d-flex gap-2 justify-content-between">
                <div>
                    <div class="fw-semibold">Runes</div>
                    @if (Coefficient is not null)
                    {
                        <div>Coeff.: <span class="fw-semibold">@Coefficient.Coefficient.ToString("N0")%</span></div>
                    }
                </div>
                @if (Cost is not null)
                {
                    <div class="d-flex flex-column align-items-center">
                        <Kamas Amount="_estimatedPrice" Size="IconSize.Medium"/>
                        @if (Coefficient is not null)
                        {
                            <span class="small text-secondary">@Coefficient.LastUpdate.ToString("G")</span>
                        }
                    </div>
                }
            </div>
            @if (!NoImage && Runes is not null)
            {
                <div class="d-flex flex-wrap gap-2">
                    @foreach ((Rune rune, double yield) in Runes)
                    {
                        <div>
                            <ItemIconWithCount Item="rune" Count="yield" Size="IconSize.Medium"></ItemIconWithCount>
                        </div>
                    }
                </div>
            }
        </div>

        <div class="col flex-grow-1">
            <div class="border border-1 border-secondary rounded p-4 d-flex flex-column align-items-center justify-content-evenly">
                <p class="fw-bold">Benefit</p>

                @if (_benefit.HasValue)
                {
                    <Kamas Amount="_benefit" Size="IconSize.Medium" Color="_benefit > 0 ? TextColor.Success : TextColor.Danger"/>
                }

                @if (_yield.HasValue)
                {
                    @if (_yield >= 0)
                    {
                        <div class="fs-4 text-success">
                            +@_yield.Value.ToString("P0")
                        </div>
                    }
                    else
                    {
                        <div class="fs-4 text-danger">
                            @_yield.Value.ToString("P0")
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

@code {

    double? _estimatedPrice;
    double? _benefit;
    double? _yield;
    Rune? _focusedRune;

    [Parameter]
    public Equipment? Equipment { get; init; }

    [Parameter]
    public DofocusItemPriceRecord? Cost { get; init; }

    [Parameter]
    public DofocusCoefficientRecord? Coefficient { get; init; }

    [Parameter]
    public Characteristic? FocusedCharacteristic { get; init; }

    [Parameter]
    public IReadOnlyDictionary<Rune, double>? Runes { get; init; }

    [Parameter]
    public IReadOnlyDictionary<Rune, DofocusRunePriceRecord>? RunePrices { get; init; }

    [Parameter]
    public bool NoImage { get; init; }

    protected override void OnParametersSet()
    {
        if (Runes is null || RunePrices is null)
        {
            _estimatedPrice = 0;
            _benefit = 0;
            _yield = 0;
            _focusedRune = null;
            return;
        }

        _estimatedPrice = Runes.Sum(kv => RunePrices.GetValueOrDefault(kv.Key)?.Price * kv.Value);
        _benefit = _estimatedPrice - Cost?.Price;
        _yield = Cost is null
            ? null
            : Cost.Price == 0
                ? 0
                : _benefit / Cost.Price;
        _focusedRune = Runes.Keys.SingleOrDefault(r => r.Characteristic == FocusedCharacteristic);
    }

}