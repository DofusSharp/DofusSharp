name: Reusable - Publish coverage report

on:
  workflow_call:
    inputs:
      artifact-name:
        description: The name of the artifact containing the coverage reports
        type: string
        default: build

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  publish-coverage:
    name: Publish coverage reports
    runs-on: ubuntu-latest

    steps:
      - name: Download coverage reports from artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ inputs.artifact-name }}
          path: coverage-reports/

      - name: Install dotnet-coverage
        run: dotnet tool install -g dotnet-coverage

      - name: Merge coverage files
        run: dotnet-coverage merge coverage-reports/**/*.cobertura.xml --output coverage-reports/coverage.cobertura.xml --output-format cobertura

      - name: Create coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage-reports/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Prepend title to coverage markdown
        run: sed -i '1s;^;## Coverage ;' code-coverage-results.md

      - name: Add Coverage as Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Add Coverage as Check Run
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Coverage
          conclusion: success
          output: |
            { "summary": "Code coverage report" }
          output_text_description_file: code-coverage-results.md

      - name: Add Coverage as PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          recreate: true
          path: code-coverage-results.md