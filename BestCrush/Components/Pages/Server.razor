@inject ServersService ServersService
@inject ItemsService ItemsService
@inject RunesService RunesService
@inject CrushService CrushService
@inject NavigationManager NavigationManager
@inject ILogger<Server> Logger
@page "/servers/{ServerName}"
@using BestCrush.Extensions
@using BestCrush.Services
@using DofusSharp.Dofocus.ApiClients.Models.Items
@using DofusSharp.Dofocus.ApiClients.Models.Runes
@using Microsoft.Extensions.Logging

<div class="container">
    <form method="post" @onsubmit="Search" @formname="search-form">
        <div class="input-group mb-3">
            <span class="input-group-text">Level</span>
            <InputNumber @bind-Value="Model!.LevelMin" class="form-control" placeholder="Min" aria-label="Min" disabled="@_searching"/>
            <span class="input-group-text">to</span>
            <InputNumber @bind-Value="Model!.LevelMax" class="form-control" placeholder="Max" aria-label="Max" disabled="@_searching"/>
        </div>

        <div class="d-flex justify-content-center mb-4">
            @if (_allItems is null)
            {
                <button class="btn btn-primary" type="submit" @onclick="Count" disabled="@_searching">Search items</button>
            }
            else
            {
                <button class="btn btn-outline-primary" type="button" @onclick="Count" disabled="@_searching">Search items</button>
            }
        </div>

        @if (_allItems is not null)
        {
            <div class="text-center">Found a total of @_allItems.Length items.</div>

            <div class="d-flex justify-content-center my-4">
                <button class="btn btn-primary" type="submit" disabled="@_searching">Find the <span class="fw-semibold">Best Crush</span></button>
            </div>

            @if (_searching)
            {
                int ranked = _rankedItems?.Count ?? 0;
                int unranked = _unrankedItems?.Count ?? 0;
                int done = ranked + unranked;
                double ratio = (double)done / _allItems.Length;
                int percent = (int)(ratio * 100);

                {
                    <div class="progress mb-4" role="progressbar" aria-label="Basic example" aria-valuenow="@done" aria-valuemin="0" aria-valuemax="@_allItems.Length">
                        <div class="progress-bar progress-bar-striped progress-bar-animated text-bg-warning" style="width: @percent%">@done / @_allItems.Length</div>
                    </div>
                }
            }
        }
    </form>


    @if (_unrankedItems is not null && _rankedItems is not null)
    {
        @if (_rankedItems.Count > 0)
        {
            <div class="my-4">
                <ul class="list-group list-group-flush rounded">
                    @foreach (ItemCrushResult item in _rankedItems.OrderByDescending(r => r.Benefits))
                    {
                        double yield = item.Benefits / item.Cost;
                        int yieldPercent = (int)(yield * 100);

                        {
                            <li class="list-group-item">
                                <div class="d-flex gap-4">
                                    <div class="d-flex align-items-start justify-content-center">
                                        @if (item.ItemIcon is not null)
                                        {
                                            <img src="data:@item.ItemIcon" width="64" height="64" alt="Item icon"/>
                                        }
                                    </div>
                                    <div>
                                        <div>@item.Item.Name.Localize() Lv. @item.Item.Level</div>
                                        <div>Cost: @item.Cost <img src="img/kama-20.png" alt="Kama" width="20" height="20"/></div>
                                        <div>
                                            Price: @item.Price <img src="img/kama-20.png" alt="Kama" width="20" height="20"/>
                                            @if (item.FocusedCharacteristic is null)
                                            {
                                                <span class="text-secondary ms-1">(without focus)</span>
                                            }
                                            else
                                            {
                                                DofocusItemCharacteristic characteristic = item.Item.Characteristics.Single(c => c.Id == item.FocusedCharacteristic.Value);
                                                <span class="text-secondary ms-1">(with focus: @characteristic.Name.Localize())</span>
                                            }
                                        </div>
                                        <div>
                                            @if (item.Benefits >= 0)
                                            {
                                                <span class="text-success">
                                                    +@item.Benefits <img src="img/kama-20.png" alt="Kama" width="20" height="20"/> (+@yieldPercent%)
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-danger">
                                                    @item.Benefits <img src="img/kama-20.png" alt="Kama" width="20" height="20"/> (@yieldPercent%)
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="flex-grow-1"></div>
                                    <div class="d-flex align-items-start justify-content-center">
                                        <button class="btn btn-outline-secondary" @onclick="() => RefreshBenefits(item.Item)" disabled="@_searching">Refresh</button>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        }

        @if (_unrankedItems.Count > 0)
        {
            <div class="my-4">
                <p>Could not compute results for items:</p>
                <ul class="text-secondary">
                    @foreach (DofocusItemMinimal item in _unrankedItems.Take(10))
                    {
                        <li>@item.Name.Localize() Lv. @item.Level</li>
                    }
                </ul>
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public required string ServerName { get; set; }

    [SupplyParameterFromForm]
    private Request? Model { get; set; }

    private bool _searching;
    DofocusItemMinimal[]? _allItems;
    List<ItemCrushResult>? _rankedItems;
    List<DofocusItemMinimal>? _unrankedItems;

    protected override void OnInitialized() => Model ??= new Request();

    async Task Count()
    {
        if (_searching)
        {
            return;
        }

        _rankedItems = null;
        _unrankedItems = null;

        IReadOnlyCollection<DofocusItemMinimal> allItems = await ItemsService.GetItemsAsync();
        DofocusItemMinimal[] items = FilterItems(allItems).ToArray();
        _allItems = items;
    }

    async Task Search()
    {
        if (_searching)
        {
            return;
        }

        _searching = true;
        try
        {
            _rankedItems = null;
            _unrankedItems = null;

            Task<IReadOnlyCollection<DofocusItemMinimal>> itemsTask = ItemsService.GetItemsAsync();
            Task<IReadOnlyCollection<DofocusRune>> runesTask = RunesService.GetRunesAsync();

            await Task.WhenAll(itemsTask, runesTask);

            DofocusItemMinimal[] items = FilterItems(itemsTask.Result).ToArray();
            _allItems = items;

            StateHasChanged();

            IReadOnlyCollection<DofocusRune> runes = runesTask.Result;

            _rankedItems = [];
            _unrankedItems = [];

            foreach (DofocusItemMinimal item in items)
            {
                try
                {
                    Dictionary<long, double> runePrices = runes.ToDictionary(r => r.CharacteristicId ?? -1, r => r.LatestPrices.Where(c => c.ServerName == ServerName).OrderByDescending(c => c.DateUpdated).FirstOrDefault()?.Price ?? 0);
                    ItemCrushResult? result = await ComputeBenefit(item, runePrices, false);
                    if (!result.HasValue)
                    {
                        _unrankedItems.Add(item);
                    }
                    else
                    {
                        _rankedItems.Add(result.Value);
                    }

                    StateHasChanged();
                }
                catch (Exception exn)
                {
                    _unrankedItems.Add(item);
                    Logger.LogError(exn, "Error while processing item {ItemName} ({ItemId})", item.Name.En, item.Id);
                }
            }

        }
        finally
        {
            _searching = false;
        }
    }

    async Task RefreshBenefits(DofocusItemMinimal item)
    {
        if (_rankedItems is null || _searching)
        {
            return;
        }

        _searching = true;
        try
        {
            IReadOnlyCollection<DofocusRune> runes = await RunesService.GetRunesAsync(true);
            Dictionary<long, double> runePrices = runes.ToDictionary(r => r.CharacteristicId ?? -1, r => r.LatestPrices.Where(c => c.ServerName == ServerName).OrderByDescending(c => c.DateUpdated).FirstOrDefault()?.Price ?? 0);
            ItemCrushResult? result = await ComputeBenefit(item, runePrices, true);
            if (!result.HasValue)
            {
                return;
            }

            _rankedItems.RemoveAll(m => m.Item.Id == item.Id);
            _rankedItems.Add(result.Value);
        }
        catch (Exception exn)
        {
            Logger.LogError(exn, "Error while processing item {ItemName} ({ItemId})", item.Name.En, item.Id);
        }
        finally
        {
            _searching = false;
        }
    }

    async Task<ItemCrushResult?> ComputeBenefit(DofocusItemMinimal item, Dictionary<long, double> runePrices, bool forceRefresh)
    {
        DofocusItem detailedItem = await ItemsService.GetItemAsync(item.Id, forceRefresh);

        DofocusCoefficientRecord? itemCoefficient = detailedItem.Coefficients.Where(c => c.ServerName == ServerName).OrderByDescending(c => c.LastUpdate).FirstOrDefault();
        if (itemCoefficient == null)
        {
            return null;
        }

        DofocusItemPriceRecord? itemCost = detailedItem.Prices.Where(r => r.ServerName == ServerName).OrderByDescending(r => r.LastUpdate).FirstOrDefault();
        if (itemCost is null)
        {
            return null;
        }

        CrushedItemPrice crushedPrice = ComputeCrushedItemPrice(detailedItem, itemCoefficient.Coefficient, runePrices);
        KeyValuePair<long, double> maxPriceWithFocus = crushedPrice.WithFocus.OrderByDescending(kv => kv.Value).FirstOrDefault();

        long? focusedCharacteristic;
        double price;
        if (maxPriceWithFocus.Value > crushedPrice.WithoutFocus)
        {
            focusedCharacteristic = maxPriceWithFocus.Key;
            price = maxPriceWithFocus.Value;
        }
        else
        {
            focusedCharacteristic = null;
            price = crushedPrice.WithoutFocus;
        }

        double benefits = price - itemCost.Price;

        string? icon = await ItemsService.GetItemIconAsync(detailedItem);
        ItemCrushResult result = new(detailedItem, icon, itemCost.Price, price, benefits, focusedCharacteristic);
        return result;
    }

    IEnumerable<DofocusItemMinimal> FilterItems(IReadOnlyCollection<DofocusItemMinimal> items)
    {
        IEnumerable<DofocusItemMinimal> result = items;

        if (Model?.LevelMin is not null)
        {
            result = result.Where(i => i.Level >= Model.LevelMin);
        }

        if (Model?.LevelMax is not null)
        {
            result = result.Where(i => i.Level <= Model.LevelMax);
        }

        return result;
    }

    CrushedItemPrice ComputeCrushedItemPrice(DofocusItem item, double coefficient, Dictionary<long, double> runePrices)
    {
        Dictionary<long, double> runesWithoutFocus = CrushService.GetRunesWithoutFocus(item, coefficient);
        double priceWithoutFocus = runesWithoutFocus.Sum(kv => runePrices.TryGetValue(kv.Key, out double runePrice) ? runePrice * kv.Value : 0);

        Dictionary<long, double> runesWithFocus = item.Characteristics.Select(c => c.Id).Select(id => (CharacteristicId: id, Runes: CrushService.GetRunesWithFocus(item, id, coefficient))).ToDictionary(kv => kv.CharacteristicId, kv => runePrices.TryGetValue(kv.CharacteristicId, out double runePrice) ? runePrice * kv.Runes : 0);

        return new CrushedItemPrice(priceWithoutFocus, runesWithFocus);
    }

    readonly record struct CrushedItemPrice(double WithoutFocus, IReadOnlyDictionary<long, double> WithFocus);

    readonly record struct ItemCrushResult(DofocusItem Item, string? ItemIcon, double Cost, double Price, double Benefits, long? FocusedCharacteristic);

    public class Request
    {
        public int? LevelMin { get; set; }
        public int? LevelMax { get; set; }
    }

}