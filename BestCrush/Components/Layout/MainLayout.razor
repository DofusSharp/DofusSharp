@using System.Globalization
@using BestCrush.Services
@using DofusSharp.Dofocus.ApiClients.Models.Servers
@inherits LayoutComponentBase
@inject ServersService ServersService
@inject NavigationManager NavigationManager

<div class="container" data-bs-theme="@_theme">
    <header class="d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-3 mb-4 border-bottom">
        <div class="col-md-3 mb-2 mb-md-0">
            <img src="img/logo-48.png" width="48" height="48" alt="Logo"/>
        </div>
        @if (_currentServer is null)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <ul class="nav col-12 col-md-auto mb-2 justify-content-center mb-md-0">
            </ul>
        }
        <div class="col-md-3 d-flex justify-content-end gap-4">
            <div class="dropdown">
                <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="@CurrentLanguageFlag" width="20" height="15" alt="Language flag"/>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item @(CultureInfo.CurrentUICulture.Name is "en-US" or "en" ? "active" : null)" @onclick="() => SelectLanguage(Language.English)"
                           href="#">
                            <img src="img/gb.png" width="20" height="15" alt="English flag"/> EN
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item @(CultureInfo.CurrentUICulture.Name is "fr-FR" or "fr" ? "active" : null)" @onclick="() => SelectLanguage(Language.French)"
                           href="#">
                            <img src="img/fr.png" width="20" height="15" alt="French flag"/> FR
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item @(CultureInfo.CurrentUICulture.Name is "es-ES" or "es" ? "active" : null)" @onclick="() => SelectLanguage(Language.Spanish)"
                           href="#">
                            <img src="img/es.png" width="20" height="15" alt="Spanish flag"/> ES
                        </a>
                    </li>
                </ul>
            </div>
            @if (_currentServer is null || _servers is null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Server: @_currentServer.Name
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        @foreach (DofocusServer server in _servers)
                        {
                            <li>
                                <a class="dropdown-item @(server.Name == _currentServer?.Name ? "active" : null)" @onclick="() => SelectServer(server)" href="#">
                                    @server.Name
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </header>
</div>

@Body

@code {

    readonly string _theme = Application.Current?.RequestedTheme is AppTheme.Dark ? "dark" : "light";
    IReadOnlyCollection<DofocusServer>? _servers;
    DofocusServer? _currentServer;

    static string CurrentLanguageFlag =>
        CultureInfo.CurrentUICulture.Name switch
        {
            "en-US" or "en" => "img/gb.png",
            "fr-FR" or "fr" => "img/fr.png",
            "es-ES" or "es" => "img/es.png",
            _ => "img/gb.png"
        };

    protected override async Task OnInitializedAsync()
    {
        Task<IReadOnlyCollection<DofocusServer>> serversTask = ServersService.GetServers();
        Task<DofocusServer?> currentServerTask = ServersService.GetCurrentServer();

        await Task.WhenAll(serversTask, currentServerTask);

        if (currentServerTask.Result is null)
        {
            NavigationManager.NavigateTo(KnownRoutes.Servers());
            return;
        }

        _servers = serversTask.Result;
        _currentServer = currentServerTask.Result;
    }

    void SelectLanguage(Language language) =>
        CultureInfo.CurrentUICulture = language switch
        {
            Language.English => new CultureInfo("en-US", false),
            Language.French => new CultureInfo("fr-FR", false),
            Language.Spanish => new CultureInfo("es-ES", false),
            _ => throw new ArgumentOutOfRangeException(nameof(language), language, null)
        };

    async Task SelectServer(DofocusServer server)
    {
        await ServersService.SetCurrentServerAsync(server);
        _currentServer = server;
        NavigationManager.NavigateTo(KnownRoutes.Server(server), true);
    }

    enum Language
    {
        English,
        French,
        Spanish
    }

}