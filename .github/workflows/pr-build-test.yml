name: Pull Request - Build and test

on:
  pull_request:
    branches: main
    types: [ review_requested, ready_for_review ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

permissions:
  contents: read

jobs:
  compute-version:
    name: Compute version
    uses: ./.github/workflows/reusable-compute-version.yml
    with:
      build-name: pr
  
  compute-changes:
    runs-on: ubuntu-latest
    
    outputs:
      dofusdb-changed: ${{ steps.filter-paths.outputs.dofusdb }}
      dofocus-changed: ${{ steps.filter-paths.outputs.dofocus }}
      best-crush-changed: ${{ steps.filter-paths.outputs.best-crush }}
    
    steps:
      - uses: dorny/paths-filter@v2
        id: filter-paths
        with:
          list-files: 'escape'
          filters: |
            dofusdb:
              - 'DofusSharp.Common*'
              - 'DofusSharp.Common*/**'
              - 'DofusSharp.DofusDb*'
              - 'DofusSharp.DofusDb*/**'
              - 'Tests.Live.DofusDb*'
              - 'Tests.Live.DofusDb*/**'
              - 'Tests.UnitTests.DofusDb*'
              - 'Tests.UnitTests.DofusDb*/**'
            dofocus:
              - 'DofusSharp.Common*'
              - 'DofusSharp.Common*/**'
              - 'DofusSharp.Dofocus*'
              - 'DofusSharp.Dofocus*/**'
              - 'Tests.Live.Dofocus*'
              - 'Tests.Live.Dofocus*/**'
              - 'Tests.UnitTests.Dofocus*'
              - 'Tests.UnitTests.Dofocus*/**'
            best-crush:
              - 'DofusSharp.Common*'
              - 'DofusSharp.Common*/**'
              - 'BestCrush*'
              - 'BestCrush*/**'
              - 'Tests.BestCrush*'
              - 'Tests.BestCrush*/**'
  
  build-and-test-dofusdb:
    name: Build and test DofusDb
    needs: [compute-version, compute-changes]
    if: needs.compute-changes.outputs.dofusdb-changed == 'true'
    uses: ./.github/workflows/reusable-build-test-sln.yml
    with:
      solution-name: DofusSharp.DofusDb.Filter.slnf
      version: ${{ needs.compute-version.outputs.version }}
      test-reports-artifact: dofusdb-test-reports
      coverage-reports-artifact: dofusdb-coverage-reports
  
  build-and-test-dofocus:
    name: Build and test Dofocus
    needs: [ compute-version, compute-changes ]
    if: needs.compute-changes.outputs.dofocus-changed == 'true'
    uses: ./.github/workflows/reusable-build-test-sln.yml
    with:
      solution-name: DofusSharp.Dofocus.Filter.slnf
      version: ${{ needs.compute-version.outputs.version }}
      test-reports-artifact: dofocus-test-reports
      coverage-reports-artifact: dofocus-coverage-reports
  
  build-and-test-best-crush:
    name: Build and test Best Crush
    needs: [ compute-version, compute-changes ]
    if: needs.compute-changes.outputs.best-crush-changed == 'true'
    uses: ./.github/workflows/reusable-build-test-sln-maui.yml
    with:
      solution-name: BestCrush.Filter.slnf
      version: ${{ needs.compute-version.outputs.version }}
      test-reports-artifact: best-crush-test-reports
      coverage-reports-artifact: best-crush-coverage-reports

  publish-test-reports:
    name: Publish test reports
    if: (!cancelled())
    needs: [build-and-test-dofusdb, build-and-test-dofocus, build-and-test-best-crush]
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Download test reports from artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: '*-test-reports'
          path: test-reports/

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-reports/*

  publish-coverage-reports:
    name: Publish coverage reports
    if: (!cancelled())
    needs: [build-and-test-dofusdb, build-and-test-dofocus, build-and-test-best-crush]
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Download test reports from artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: '*-coverage-reports'
          path: coverage-reports/

      - name: Install dotnet-coverage
        run: dotnet tool install -g dotnet-coverage

      - name: Merge coverage files
        run: dotnet-coverage merge coverage-reports/**/*.cobertura.xml --output coverage-reports/coverage.cobertura.xml --output-format cobertura

      - name: Create coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage-reports/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Prepend title to coverage markdown
        run: sed -i '1s;^;## Coverage ;' code-coverage-results.md

      - name: Add Coverage as Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Add Coverage as Check Run
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Coverage
          conclusion: success
          output: |
            { "summary": "Code coverage report" }
          output_text_description_file: code-coverage-results.md

      - name: Add Coverage as PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          recreate: true
          path: code-coverage-results.md