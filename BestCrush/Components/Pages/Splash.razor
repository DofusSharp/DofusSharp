@inject ServersService ServersService
@inject BestCrushDbContext BestCrushDbContext
@inject ApplicationUpgradesHandler ApplicationUpgradesHandler
@inject IDofusDbClientsFactory DofusDbClientsFactory
@inject GameDataUpgradeHandler GameDataUpgradeHandler
@inject NavigationManager NavigationManager
@inject ILogger<Splash> Logger;
@page "/"
@using BestCrush.Domain
@using BestCrush.Domain.Models
@using BestCrush.Domain.Services
@using BestCrush.Domain.Services.Upgrades
@using DofusSharp.Dofocus.ApiClients.Models.Servers
@using DofusSharp.DofusDb.ApiClients
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using CurrentVersion = CurrentVersion
@layout EmptyLayout

<div class="container h-100 d-flex flex-column align-items-stretch justify-content-center gap-4 text-center py-5">
    @if (_error is not null)
    {
        <div class="d-flex justify-content-center">
            <img src="img/logo-684.png" width="342" height="342" alt="Logo"/>
        </div>
        <div>
            <div class="d-flex flex-column align-items-center justify-content-center">
                <div class="lead text-danger">@_error</div>
                @if (_errorDetails is not null)
                {
                    <div>
                        <a class="btn btn-link dropdown-toggle" data-bs-toggle="collapse" href="#showErrorDetails" role="button" aria-expanded="false"
                           aria-controls="showErrorDetails">
                            Voir plus de détails
                        </a>
                        <div class="collapse font-monospace text-start text-danger smaller" id="showErrorDetails" style="white-space: pre-wrap">
                            @_errorDetails
                        </div>
                    </div>
                }
                <div class="py-2">
                    <button class="btn btn-danger" @onclick="Application.Current!.Quit">Quitter l'application</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <img src="img/logo-684.png" width="684" height="684" alt="Logo"/>
        </div>
        <div>
            <div class="lead">@_progress.Message</div>
            @if (!_progress.Done)
            {
                @if (_progress.Percent is null)
                {
                    <div class="progress" role="progressbar" aria-label="Progress" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="height: 4px">
                        <div class="progress-bar progress-bar-striped bg-warning" style="width: 100%"></div>
                    </div>
                }
                else
                {
                    int p = (int)_progress.Percent;

                    <div class="progress" role="progressbar" aria-label="Progress" aria-valuenow="@p" aria-valuemin="0" aria-valuemax="100" style="height: 4px">
                        <div class="progress-bar bg-warning" style="width: @(p)%"></div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {

    ProgressMessage _progress = new("Starting...", null);
    string? _error;
    string? _errorDetails;

    protected override void OnInitialized() => _ = Task.Run(ExecuteAsync);

    async Task ExecuteAsync()
    {
        try
        {
            ProgressSync<ProgressMessage> progress = new(m =>
                {
                    _progress = m;
                    InvokeAsync(StateHasChanged).GetAwaiter().GetResult();
                }
            );

            _progress = new ProgressMessage("Migration de la base de données...", null);
            await InvokeAsync(StateHasChanged);
            await BestCrushDbContext.Database.MigrateAsync();

            _progress = new ProgressMessage("Mise à jour des données...", 0);
            await InvokeAsync(StateHasChanged);
            await UpgradeAsync(progress);

            _progress = new ProgressMessage("Chargement des serveurs...", null);
            await InvokeAsync(StateHasChanged);
            _ = await ServersService.GetServers();

            _progress = new ProgressMessage("Prêt.", null, true);
            await InvokeAsync(StateHasChanged);

            DofocusServer? currentServer = await ServersService.GetCurrentServer();
            NavigationManager.NavigateTo(currentServer is not null ? KnownRoutes.Server(currentServer) : KnownRoutes.Servers());
        }
        catch (Exception exn)
        {
            _error = "Une erreur inattendue s'est produite.";
            _errorDetails = exn.ToString();
            Logger.LogError(exn, "An unexpected exception has occurred.");
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task UpgradeAsync(ProgressSync<ProgressMessage>? progress = null, CancellationToken cancellationToken = default)
    {
        await ApplicationUpgradesHandler.UpgradeAsync(CurrentVersion.Version, progress?.DeriveSubtask(0, 50), cancellationToken);

        Version version = await DofusDbClientsFactory.Version().GetVersionAsync(cancellationToken);
        await GameDataUpgradeHandler.UpgradeAsync(version, progress?.DeriveSubtask(50, 100), cancellationToken);
    }

}